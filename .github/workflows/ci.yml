name: CI/CD Pipeline

# Only run on push to main branch
on:
  push:
    branches: [ main ]
  # Optional: Also run on PRs to main to preview checks
  pull_request:
    branches: [ main ]

jobs:
  # Frontend checks and build
  frontend:
    name: Frontend Build & Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            emisjon-frontend/node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('emisjon-frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-frontend-

      - name: 📦 Install frontend dependencies
        working-directory: ./emisjon-frontend
        run: pnpm install --no-frozen-lockfile

      - name: 🔍 TypeScript check
        working-directory: ./emisjon-frontend
        run: npx tsc --noEmit

      - name: 🏗️ Build frontend
        working-directory: ./emisjon-frontend
        run: pnpm run build

      - name: ✅ Frontend ready for deployment
        run: echo "Frontend build successful!"

  # Backend checks and build
  backend:
    name: Backend Build & Check
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            emisjon-backend/node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-backend-${{ hashFiles('emisjon-backend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-backend-

      - name: 📦 Install backend dependencies
        working-directory: ./emisjon-backend
        run: pnpm install --no-frozen-lockfile

      - name: 🔍 TypeScript check
        working-directory: ./emisjon-backend
        run: npx tsc --noEmit

      - name: 🔍 Validate Prisma schema
        working-directory: ./emisjon-backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://user:password@localhost:5432/db' }}
        run: npx prisma validate

      - name: 🏗️ Build backend
        working-directory: ./emisjon-backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://user:password@localhost:5432/db' }}
        run: pnpm run build

      - name: ✅ Backend ready for deployment
        run: echo "Backend build successful!"

  # Status check - only passes if both frontend and backend succeed
  deploy-check:
    name: Deployment Ready Check
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🎉 All checks passed
        run: |
          echo "✅ Frontend build: SUCCESS"
          echo "✅ Backend build: SUCCESS"
          echo "🚀 Ready for Vercel deployment!"
          echo ""
          echo "Vercel will now automatically deploy your application."
          echo "Check your Vercel dashboard for deployment status."

  # Optional: Add deployment status notification
  notify-status:
    name: Status Notification
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: always()
    
    steps:
      - name: 📊 Check status
        run: |
          if [ "${{ needs.frontend.result }}" == "success" ] && [ "${{ needs.backend.result }}" == "success" ]; then
            echo "✅ CI/CD Pipeline: SUCCESS"
            echo "All checks passed. Safe to deploy!"
          else
            echo "❌ CI/CD Pipeline: FAILED"
            echo "Frontend: ${{ needs.frontend.result }}"
            echo "Backend: ${{ needs.backend.result }}"
            echo "Deployment blocked. Please fix the issues."
          fi